// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Role {
  admin
  user
  agent
  agencies
}

model user {
  id    String  @id @default(uuid()) 
  userName String
  email String  @unique
  password  String
  role Role
  status Boolean @default(false)
  createdAt DateTime @default(now())
  profile profile?
 
}

model otp {
  

  id        Int     @id @default(autoincrement())
  email     String
  otp       String
  createdAt DateTime @default(now())
  
}


model profile {
  id              String   @id @default(uuid())
  user            user     @relation(fields: [userId], references: [id]) 
  businessName    String   
  phone           String
  licenseNumber   String
  bio             String
  specialization  specialization     @relation(fields: [specializationId], references: [id]) 
  city            city               @relation(fields: [cityId], references: [id]) 
  imageUrl        String?
  verified        Boolean @default(false)
  createdAt       DateTime @default(now())    
  userId          String   @unique
  specializationId String   @unique
  cityId           String   @unique

  properties property[]
}


model city{

  id        String   @id @default(uuid())
  cityName  String
  country   String
  createdAt DateTime @default(now())

  profiles  profile[] 
  property  property[]
}


model specialization{
  
  id  String @id @default(uuid())
  title String
  description String
  createdAt DateTime @default(now())
  
  profiles  profile[]
 }



 model property{

  id        String @id @default(uuid())
  name      String
  price     String
  room      String
  bathroom  String
  sm        String
  imageUrl  String


  profileId    String
  profile      profile   @relation(fields: [profileId], references: [id])

  cityId    String
  city      city     @relation(fields: [cityId], references: [id])

 

 }